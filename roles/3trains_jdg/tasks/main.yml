---
- assert:
    that:
      - jdg is defined
      - jdg.home is defined
      - jdg.user is defined
      - jdg.user.name is defined
      - jdg.group is defined
      - jdg.group.name is defined
      - jdg_version is defined
    quiet: true

- include_tasks: prereqs.yml

- group:
    name: "{{ jdg.group.name }}"
    state: present
    gid: "{{ jdg.group.id | default(omit) }}"

- user:
    name: "{{ jdg.user.name }}"
    state: present
    uid: "{{ jdg.user.id | default(omit) }}"

- set_fact:
    zip_file_repo: /opt/apps

- set_fact:
    jdg_src: "{{ zip_file_repo }}/jdg-{{ jdg_version }}.zip"

- file:
    path: "{{ zip_file_repo }}"
    state: directory

- name: Download JBoss Core Services from CSP
  redhat_csp_download:
    url: "https://access.redhat.com/jbossnetwork/restricted/softwareDownload.html?softwareId=98151"
    dest: "{{ jdg_src }}"
    username: "{{ rhn_username }}"
    password: "{{ rhn_password }}"
  when:
    - not jdg_installed is defined

- stat:
    path: "/opt/redhat-datagrid-8.2.0-server/"
  register: jdg_home

- debug:
    msg: "{{ jdg_home }}"

- name: Unarchive JDG
  unarchive:
    src: "{{ jdg_src }}"
    remote_src: yes
    dest: /opt
    creates: "/opt/redhat-datagrid-8.2.0-server/server"
  when:
    - not jdg_home.stat.exists

- file:
    path: "{{ jdg.home }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    recurse: true
  changed_when: false


- name: "Configure systemd unit file for JDG service"
  template:
    src: templates/infinispan.service.j2
    dest: /etc/systemd/system/jdg.service
    owner: root
    group: root
    mode: 0644
  register: jdg_daemon_reload
  notify:
    - restart jdg

- name: "Ensures JDG configuration is deployed: {{ jdg.config.name }}"
  template:
    src: "{{ jdg.config.template }}"
    dest: "{{ jdg.home }}/server/conf/{{ jdg.config.name }}"
    owner: "{{ jdg.user.name }}"
    group: "{{ jdg.group.name }}"
    mode: 0644
  when:
    - jdg.config is defined
    - jdg.config.name is defined
  notify:
    - restart jdg

- include_tasks: jdg_user.yml
  vars:
    users: "{{ jdg.users }}"
  when:
    - jdg.users is defined
    - jdg.users | length > 0

- name: "Perform daemon-reload to ensure the changes on jdg service are picked up"
  systemd:
    daemon_reload: yes
  when:
    - jdg_daemon_reload is defined
    - jdg_daemon_reload.changed

- name: Ensures JDG service is running
  systemd:
    name: jdg
    state: started
    enabled: yes

- name: "Wait for all used ports to be open"
  wait_for:
    port: "{{ jdg.port }}"
    delay: 0
  when:
    - jdg_healthcheck is defined
    - jdg.port is defined

- include_tasks: cache.yml
  vars:
    jdg_url: "http://{{ jdg.bind_addr }}:{{ jdg.port }}"
    jdg_username: "{{ jdg.users[0].name }}"
    jdg_password: "{{ jdg.users[0].password }}"
    cache:
      name: kitchensink_sql_cache

